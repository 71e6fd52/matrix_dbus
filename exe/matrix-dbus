#!/usr/bin/env ruby

require 'matrix_dbus'
Thread.abort_on_exception = true

def send_if_exist(obj, name, json)
  obj.send name, JSON.pretty_generate(json) unless json.empty?
end

def matrix2dbus(c, obj)
  json = c.json
  %i[normal rooms device].each { |a| send a, obj, json }
end

def normal(obj, json)
  obj.all JSON.pretty_generate json

  %w[account_data to_device presence].each do |name|
    send_if_exist obj, name, json[name]['events']
  end
end

def rooms(obj, json)
  send_if_exist obj, :rooms, json['rooms']
  %w[leave join invite].each do |name|
    send_if_exist obj, name, json['rooms'][name]
  end
end

def device(obj, json)
  send_if_exist obj, :device_lists, json['device_lists']
  %w[changed left].each do |name|
    send_if_exist obj, name, json['device_lists'][name]
  end
end

bus = DBus::SessionBus.instance
service = bus.request_service 'org.dastudio.matrix'
obj = MatrixDBus::Matrix2DBus.new '/org/dastudio/matrix'
service.export obj

obj.matrix.bind ->(c) { matrix2dbus c, obj }
obj.run

main = DBus::Main.new
main << bus
main.run
